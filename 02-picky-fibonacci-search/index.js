'use strict'

// Description: Write a function that will accept a single number and return
// THAT number of fibonacci sequence numbers that have an equal FIRST and LAST
// digit. ex: 14531 would be added; 34567 wouldn't.

exports.calculate = (n) => {
  // Fibonacci sequences are generated by adding the most recent two numbers to
  // generate a third, repeatedly. If n is 0, we just stop.
  if (n <= 0) return 0
  let fibArray = [0, 1] //this prepares our Fibonacci machine to churn out the series.
  let completedArray = []
  let i = 1 //this is used to create our fibArray in an iterative fashion.
  while (completedArray.length < n) { // while our return values are not equal to to our arg, cont...
    fibArray.push(fibArray[i] + fibArray[i - 1]) //makes the sequence go~
    let fibNum = fibArray[fibArray.length - 1]
      .toString()
      .split('') //because numbers have no indices, we turn it into an array of strings
    if (fibNum[0] === fibNum[fibNum.length - 1] && fibNum.length > 1) { //check first and last index, and make sure we aren't adding single digit numbers, since their "first" and "last" numbers are the same
      completedArray.push(fibArray[fibArray.length - 1]) //don't bother trying to do anything with the fibNum variable. we only use that to check, so parsing it back into a single primitive is unecessary.
    }
    i++ //increment to continue making our fib series.
  }
  return completedArray
}

exports.calculate(7)
